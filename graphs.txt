-----------------
Graphs
-----------------

 Terminology
 -----------
   * Vertices and edges
   * Degree of a vertex: The number of edges adjacent to it
   * Regular graph: each vertex has the same degree
   * Connectivity of a graph: the smallest number of vertices
                              whos deletion would disconnect the graph
  * Articulation vertex: or 'cut node': a vertex whos deletion would disconnect
                                        a connected component from the graph.
  * Matching: a subset of the edges so that no 2 edges in the subset share
              a vertex
  * Biconnected component: If any edge can be cut and the component is still connected
                           -> find by searching for articulation vertices,
                              they separate the biconnected components

 Flavors
 -------
     * undirected vs directed
     * weighted vs unweighted
     * simple vs non-simple (no loops, no multi-edges)
     * cyclic vs acyclic
     * sparse vs dense
     * connected vs unconnected vs strongly connected
        - strongly connected means every vertex can be reached from every vertex
     -> tree is connected, acyclic, unidirectional

 Storage
 -------
    * Adjacency matrix: m[x][y] is True if 'x' and 'y' are connected
        + fast lookup/insert/deletion of edges
        - uses O(v^2) space
        - expensive to add vertices
    * Adjacency list: A list of linked lists of neighbors.
                      Each vertex has a linked list.
       - hard to verify if edge (x, y) is in G
          -> many algorithms do not need to do that lookup
       + space efficient O(v + e)
       + cheap to add vertices/edges
       -> often the right data structure
    * Node as object, Edge as pointer:
       + Uses O(v + e) space

 Breadth First Search
 --------------------
    * First visit all edges from the root before investigating any other vertices
    * Complexity O(v + e)
    * Algorithm:
      * remember vertices to visit once you've encountered them,
        unless you already visited them.

       def bfs(root):
           to_visit = Queue(root)

           while not to_visit.empty:
                vertex = to_visit.get()
                vertex.visited = True

                pre_visit_vertex(vertex)
                for edge in vertex.edges:
                    visit_edge(edge)
                    if not edge.endpoint.visited:
                        edge.endpoint.parent = vertex
                        to_visit.add(edge.endpoint)
                post_visit_vertex(vertex)


 Depth First Search
 ------------------
    * Follow one path as deep as possible before following a sibling path
    * Complexity O(v + e)
    * Recursive:
       def dfs():
           for vertex in vertices:
               if not vertex.visited:
                   visit(vertex)

      def visit(vertex):
          v.visited = True
          pre_visit_vertex(vertex)
          for edge in v.edges:
              visit_edge(edge)
              if not edge.endpoint.visited:
                  edge.endpoint.parent = vertex
                  visit(edge.endpoint)
          post_visit_vertex(vertex)

    * 'tree edges' are the edges we visit and the endpoint is not visited yet,
      'back edges' are the edges going back to an ancestor

 Find Connected components
 -------------------------
    * A connected component is a group of vertices that have a path between them
    * Find all connected components using BFS
        * start at random vertex, run it, remember which vertices were encountered
        * then pick another random vertex to discover the next connected component

        for vertex in vertices:
            if not vertex.visited:
                 bfs(vertex)
                 print("Got component {components}")

        def pre_visit_vertex(vertex):
             components.add(vertex)

    * O(v + e)

  Vertex coloring
 ----------------
    * Assign each vertex a color so no edge (directly) links 2 vertices with
      the same color, using a minimum number of colors.
    * O(v + e)
    * Use case: Register allocation in compilers
    * Optimal number of colors is the maximum degree of the graph,
      unless the graph is complete or an odd circle (then you need one more).
    * NP-complete
    * Greedy Heuristic:
        - Order the vertices by degree (descending order)
        - For each vertex, pick a color not used by any of the neighbors.
        - Will use at most <max-degree> plus one colors, i.e. max 1 too many

 Two-coloring graph
 -----------------
    * A graph is 'Bipartite' if it can be colored using only 2 colors
    * (example had-sex-with if nobody was LGT)
    * Use BFS and give each one the opposite color of the parent:

      for vertex in vertices:
          if not vertex.visited:
               vertex.color = WHITE
               bfs(vertex)

      def pre_visit_vertex(vertex):
          vertex.color = complement(vertex.parent.color)

  Edge coloring
  -------------
     * Assign each edge a color so no 2 same-color edges share a common vertex
     * NP-complete
     * Encountered when scheduling applications:
         For example, suppose we want to schedule a set of 2-person interviews.
         We want to schedule non-conflicting events simultaneously.
         -> Create a graph with vertices = people and edges = pairs to be
            interviewed. The colors then represent timeslots
     * Optimal number of colors is at most the maximum vertex degree of the graph
       plus one.
     * Vizing's algorithm will always find a solution of <max-vertex-degree> plus one:
       * O(v*e*<max vertex degree>)
       * Color all edges one by one as long as you can do it
       * When you have an edge (e1) from X to Y that you can't color,
         look at the colors used in Y.
         These are at most <max-vertex-degree>, so there is at least
         one color still available (yellow).
          - Find the edge (e2) in X that uses (yellow), and look at the vertex it goes to.
            Find the color still available there (blue).
               - If X does not use (blue) --> change the color of (e2) to (blue),
                 and you can use (yellow) for (e1).
               - If X uses (blue), find the edge in X that does use it (e3).
                 Again, look at the color it does not use (green).
               - Repeat this over and over, and eventually you will find that
                 edge (eX) requires a color we already investigated (blue).
                 So in this case, assign (blue) to (eX),
                 then assign (green) to (e3) (which was blue previously),
                 and unravel and you'll end up you can continue.

 Find Articulation vertices
 --------------------------
     * Also called 'cut node'
     * Good explanation here:
        https://www.eecs.wsu.edu/~holder/courses/CptS223/spr08/slides/graphapps.pdf
     * Basically we use DFS, and when we encounter a back-edge the vertex knows
       'hey, I am part of a loop that can go back to ancestor X'.
       Then, when leaving this vertex it will inform its parent of this back-edge,
       which recursively happens so that eventually the ancestor 'X' is told
       it is part of a loop that goes up to themselves.
       Now this ancestor knows it is a articulation vertex,
       as cutting it up will disconnect the entire loop from the root.
       There are 2 exceptions:
           - if the ancestor is a leaf, it is not an articulation vertex
           - if the root has 2 or more edges, it is an articulation vertex
     * Use DFS
         * 'index' is the visit number (vertex you visited x-th has index 'x')
             -> calculated in pre_visit_vertex hook
         * 'cycle-root' is the vertex with the lowest 'index' that can be reached
             - via own back-edges, or
             - via back-edges of a descendent node
             -> calculated in post_visit_vertex hook
        * Then, articulation vertices are:
            - the root if it has 2 or more edges
            - any 'cycle-root' unless it is a leaf
             (as cutting it will cut of the vertices that can only reach this
              and no higher vertices)

      def pre_visit_vertex(vertex):
          vertex.index = vertex.parent.index + 1
          vertex.cycle_root = vertex.index

      def process_edge(edge):
          if edge.endpoint.visited and edge.endpoint is not edge.parent:
              # A back-edge, so update our cycle-root
              edge.start.cycle_root = min(edge.start.cycle_root, edge.endpoint.index)

      def post_visit_vertex(vertex):
         if vertex.parent is None:
             if vertex.degree > 1:
                 print("ROOT IS AN ARTICULATION POINT")
         else:
             # If we can reach a cycle-root higher than our parent, let them know
             if vertex.cycle_root < vertex.parent.cycle_root:
                 vertex.parent.cycle_root = vertex.cycle_root

             if vertex.cycle_root == vertex.index:
                 if vertex.degree > 1:
                     print("VERTEX IS AN ARTICULATION POINT")

 Topological sorting
 -------------------
    * Order vertices so all directed edges go from left to right
    * Works on Directed Acyclical Graphs
    * Used to satisfy precedence constrains (X must be done before Y)

     Algorithm to find one sequence
     ------------------------------
        * Use DFS, and push *finished* vertexes in a stack

        def post_visit_vertex(vertex):
            stack.push(vertex)

     Algorithm to find schedule
     --------------------------
        * Use DFS and find all source vertices (with in-degree zero).
        * After scheduling (deleting) these, find the new source vertices.
        * Can be implemented in O(v + e)
            - count in-degree of all vertices
            - put source vertices in a queue
            - upon deletion of a source, lower the in-degree of all its endpoints
              and add the new sources to the queue

 Find cycles
 -----------
    * Use DFS, and keep index
    * check for edges going to vertices with lower index
    * Note: for undirected graphs, 'index' is not required: if you encounter a
            visited endpoint that is not your parent, you have a cycle

    def pre_visit_vertex(vertex):
        vertex.index = vertex.parent.index

    def process_edge(edge):
        if edge.endpoint.visited and edge.endpoint.index < edge.start.index:
            # Cycle found

 Strongly connected components
 -----------------------------
     * If you can go to every vertex from every vertex
     * Very useful (for example important for roads or you'd get stuck)
     * O(e + v)
     * Use DFS, and remember in what order we leave the vertices
     * Reverse direction of all edges,
       and use DFS on the reversed graph starting with the vertex we left latest.
       -> each tree here is a strongly connected components

    Step 1:
      def pre_visit_vertex(vertex):
          vertex.index = vertex.parent.index

    Step 2:
       reversed_graph = reverse(graph)
       vertices = sorted(reversed_graph.vertices, key=lambda v: v.index)
       for vertex in vertices:
           if not vertex.visited:
               components = []
               dfs()
               print(f"{components} are strongly connected")

       def pre_visit_vertex(vertex):
           components.append(vertex)

 Minimum spanning tree
 ----------------------
    * Used in weighted graphs
    * the tree with the minimum total weight
    * Prim's algorithm:
        - start with any vertex as the tree
        - pick the cheapest edge between tree and vertex not in tree
        - repeat
              # All edges going out of the tree.
              tree_edges = {root: 0}

              while any_vertices_remaining:
                  vertex = pick_vertex_to_add()
                  vertex.added = True
                  update_tree_edges(vertex)

              def pick_vertex_to_add():
                  # Find and return the cheapest edge from tree_edges

              def update_tree_edges(vertex):
                  del tree_edges[vertex]
                  # Now go over the edges of vertex and update the values in tree_edges
                  # if the new edge is cheaper

        - Complexity: O(v^2)
        - Note: can be done cheaper using fancy binary heaps for tree_edges

    * Krushal's algorithm:
        - put each vertex in its own set
        - go over the edges ordered by weight, and if the edge connects 2 sets, merge them.
        - O(e lg v): sort edges O(e lg e), then for each edge O(lg v) lookup
                     if we use a set-partition
                     (because e is <= v^2 we know that log e <= log v^2 = 2 log v)
        + better than Prim's algorithm if the graph is sparse

 Maximum spanning tree
 ---------------------
    * Use minimum spanning tree with negative weights

 Minimum product spanning tree
 -----------------------------
    * To minimize the product of the weights, use log(weight) as weight
      (because log(a*b) = log(a) + log(b))

 Minimum bottleneck spanning tree
 --------------------------------
    * This means we want the maximum edge weight to be as low as possible.
    * Is automatically guaranteed (think of how Krushal's algorithm works,
      we always pick the cheapest edge possible)

 Find Shortest path
 ------------------
    Unweighted graph
    ----------------
        * Use BFS and remember the parent when discovering a vertex
    DAG
    ---
       * Direct, Acyclical Graph
       * Use Topology sort and you have the path
       * O(v + e)
    Dijkstra
    --------
      * O(v^2) as for each vertex we find the vertex with the lowest cost O(v)
      * On each iteration visit the vertex with the lowest cost to reach.
        Then use their edges to update the cost of the neighboring vertices
        (if it is lower than the current cost). Also set the parent pointer in
        that case.
        Rinse and repeat, and at the end you have the cost and path
            for vertex in vertices:
                vertex.cost = math.inf
            root.cost = 0

            to_visit = set(vertices)

            while len(to_visit):
                vertex = pop_vertex_with_lowest_cost(to_visit)
                for edge in vertex:
                    new_cost = vertex.cost + edge.weight
                    if edge.endpoint.cost < new_cost:
                        edge.endpoint.cost = new_cost
                        edge.endpoint.parent = vertex
            # Now the endpoint.cost and endpoint.parent can be used to find cost
            # and direction of the shortest path
       * Note: Only works with positive weights
    A*
    --
       * A star is a best-first search,
         where for each iteration it decides to extend the path with the minimum
         value
             f(n) = <cost-to-get-to-n> + <estimated-cost-from-n-to-end>
         After this it updates the f(n) for all its neighbors and we repeat.
      * This of this as Dijkstra but instead of going completely wide it smartly
        tries to pick the path with the best prospect.
      * For example, in navigation the estimate can be the straight line distance
        between 'n' and the end.
      * As long as the heuristic never overestimates the cost, then this algorithm
        will have found the best solution the moment it reaches the end.

 Find All Shortest paths
 -----------------------
    * We can run Dijkstra for each vertex -> O(v^3)
    * Floyd's algorithm is also O(v^3), but simpler so faster in reality
        * Create distance matrix. Initialize edges, and set rest to math.inf
        * Then we will go over each vertex 'V',
          and check for each set of vertices if their distance would be shorter
          if they used a path through 'V' instead of whatever path they used before.

          distances = initialize_matrix()

          for V in vertices:
              for left in vertices:
                  for right in vertices:
                      distance_through_V = distances[left][V] + distances[V][right]
                      if distance_through_V < distances[left][right]:
                          distance[left][right] = distance_through_V
       * Note: This also gives us the 'transitive closure', i.e. which vertex
               can reach most other vertices (because if it is unreachable distance
               will remain math.inf)

 Network flow
 ------------
    * Use BFS to find a possible path from source to drain
    * See how much volume we can push through this path, and substract that
      from the path's capacity
    * Remove edges that are fully saturated
    * Repeat until no path remains
    * Proven to be O(v^3) if we always pick the shortest path (hence the use of BFS)
    * Note: Faster algorithms exist using 'preflow-push methods' (see literature)
      total_volume = 0
      while True:
          initialize_search() # resets parent pointers, visited, and so on
          bfs()
          if _could_reach_endpoint():
              volume = _get_path_volume()
              _add_stream(volume)
              total_volume += volume
          else:
              return total_volume

      def _could_reach_endpoint():
        return endpoint.parent is not None

      def _get_path_volume():
          return min(edge.remaining_capacity for edge in _get_path())

      def _add_stream(volume):
          for edge in _get_path():
              edge.remaining_capacity -= volume
              edge.flow += volume
              if edge.remaining_capacity == 0:
                  edge.start.remove_edge(edge)
                 # alternatively support an edge_filter in BFD and check for
                 # remaining_capacity in the filter

      def _get_path():
        start = endpoint
        while start.parent is not None:
            yield _find_edge(from=start, to=start.parent)
            start = start.parent

  Minimum cost flow
  -----------------
     * Route a flow of capacity 'F' through a network with minimum cost
       (so each edge has an associated cost).

 Network flow with multiple sources/sinks
 ----------------------------------------
     * Just add a master source/sink that connects all sources/sinks

 Transitive Closure
 ------------------
    * The transitive closure of a graph G is the graph T with the same vertices
      and an edge between x and y if there is a path in G connecting x and y.
    * Algorithms:
          * Using Breadth First Search
             * Do a BFS (or DFS) from each vertex and remember all vertices encountered
             * -> O(v (v + e))
             + Runs good on sparse graphs

          * Warshall's algorithm
             * Same as Floyd's algorithm for shortest path.
             * The matrix can be a bitvector (using '1' if there is a connection)
             * O(n^3)
    * Optimizations:
        - Replace all cycles (strongly connected components) with a single vertex
          (as you will be able to reach all of them if you can reach one of them)

 Transitive Reduction
 --------------------
    * Find the smallest graph with the same transitive closure as the original graph
    * i.e. cut all edges that are not required for connectivity
    * Algorithms:
        * Replace each strongly connected component with a simple directed cycle
        * Not provable minimal
        * O(v + e)
        * Note: This might add edges that were not part of the original graph

 Matching
 --------
    * Find the largest set of edges so that each vertex has at most one edge
    * Useful for job matching if we have a job of workers where each can do
      a subset of the tasks.

 Bipartite Matching
 ------------------
    * A Bipartite graph is a graph where the vertices can be divided in 2 groups
     so that all edges go from one group to the other.
     Example: The graph linking workers to the jobs they can do
        (as there will be no edges from worker to worker or job to job)
    * To solve this for an *unweighted* graph,
      use the network-flow algorithm by adding a source and a sink,
      and connecting the source to each vertex in one group and the sink to each
      vertex in the other. (all these connections have capacity one).
      Then calculate the network flow and whatever streams you find are
      part of the bipartite matching.

 Eulerian Cycle
 --------------
    * Eulerian PATH: Can you draw a figure using a pen,
                     drawing each line exactly once,
                     without lifting the pen from the paper?
    * Eulerian CYCLE: And, can you finish where you started?
    * Possible for:
        - undirected graph:
            * has an Eulerian *CYCLE* iff (if and only if):
               - connected
               - each vertex has an even degree
            * has an Eulerian *PATH* iff (if and only if):
               - connected
               - each vertex has an even degree except for 2 (the start and end)
        - directed graph:
            * has an Eulerian *CYCLE* iff (if and only if):
               - strongly connected
               - each vertex has the same in-degree and out-degree
            * has an Eulerian *PATH* iff (if and only if):
               - strongly connected
               - each vertex but 2 has the same in-degree and out-degree
               - one vertex has in-degree one smaller than the out-degree
               - one vertex has in-degree one bigger than the out-degree
    * To test for an Eulerian Cycle:
        * BFS/DFS and count the in- and out-degrees
    * To find an Eulerian Cycle:
        * Perform DFS from some vertex v until you end up in v again.
        * This is the 'main path'.
        * Now perform DFS from the first vertex v' that has an untraveled edge,
          until you end in v' again.
          Splice this path into the main path (meaning the end result is:
              - you take the original path from v until v'
              - then you take the detour loop that you just created
              - then you move on along the original path from v' to v.
       * Repeat this step recursively until all edges are walked.

 Chinese postman
 ---------------
    * Find the shortest Eulerian Cycle for any given graph
    * To find this, we add edges to a graph until it is Eulerian,
      by taking 2 vertices that have an odd number of edges,
      and add an edge between them (that represents the shortest path between
      these 2 edges).
    * Repeat until you have no vertices with an odd degree anymore.

 Graph connectivity
 -------------------
    * The edge/vertex connectivity is the minimum number of edges/vertices that
      must be removed to make the graph disconnected.
    * Notes:
        - The lowest vertex degree is an upper bound for the connectivity
          (as removing all the edges of this vertex will disconnect the graph)
        - The connectivity is 0 if the graph is not (strongly) connected.
        - Vertex connectivity is <= edge connectivity
        - Articulation vertices mean the connectivity is 1
    * Calculation:
        - Make the graph unweighted, and pick any 'source' vertex.
        - For any other vertex 'destination',
          calculate the network flow between 'source' and 'destination'.
          This is the number of cuts that will separate the graph between these
          vertices,
          so the minimum of these flows is the edge connectivity of the graph.
        - requires 'v-1' executions of the network flow (which is O(v^3)),
          --> O(v^4)
        - To calculate the vertex flow, create a graph G' with a vertex for each
          edge in G, and an edge if these edges share a vertex in G.
          Then calculate the network flow of G'.

 Find largest Clique
 -------------------
    * This is a subset which is fully connected, i.e. for each x, y in the subset
      there is an edge from 'x' to 'y'.
    * NP-complete

 Find independent set
 --------------------
    * This is a set of vertices which are all disjoint, i.e. for each x, y in
      the subset there is *no* edge from 'x' to 'y'.
    * NP-complete
    * Related to vertex-coloring, as each color used represents an independent set.
    * Heuristic:
       - Select the lowest degree vertex, add it to the set,
          and remove itself, its edges and its neighboring vertices from the graph.
       - Rinse and repeat.
       - O(v + e)
    * For a tree:
       - Pick all the leafs, delete the next level, and repeat.
       - O(n)

 Vertex Cover
 ------------
    * A set of vertices so that every edge starts or ends in one (or two) of these
      vertices.
     * This covers all edges so not sure why it is called 'vertex cover' :-)
    * NP-complete
    * Related to independent set
      (as all the vertices not in the cover are the largest independent set)
    * Heuristic:
         * Same as for independent set, but always pick the *largest* degree vertex

 Traveling Salesman
 ------------------
    * Find they cycle with minimum cost that visits each vertex once
    * NP-complete
    * Heuristic:
       * Calculate minimum spanning tree
       * Do DFS in the resulting graph
       * Define the tour by ordering the vertices in the order they were discovered

 Isomorphism/Graph matching
 --------------------------
    * Are 2 graphs identical?
    * NP-complete (probably, not proven)
    * Some algorithm optimizations:
       - Only try to match vertices with the same degree
       - Use information in shortest-path-matrix to match only vertices with
         the same set of shortest-paths.
       - Use these optimizations for pruning while backtracking.

 Steiner Tree
 ------------
    * Smallest tree connecting all the vertices
    * Allows introduction of new vertices
      (so instead of 2 parallel edges you have them meet and run together)
    * Used in reality for waterpipes or heating ducts
    * NP-complete
    
