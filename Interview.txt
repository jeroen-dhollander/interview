
TODO:
   - Read LinkedIn document in one of the mails
   - Read Amazon Leadership Principles
   - Review STAR interview technique (for Amazon?)
   - Amazon: Alex Escott will do interview
   - Amazon: Open livecode link

Algorithms:
   - https://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693
    Graph Algorithms
    Backtracking algorithms
    Recursive algorithms
    Bottom-up vs top-down (https://medium.freecodecamp.org/demystifying-dynamic-programming-24fbdb831d3a)

    - heuristic search methods? Not needed I think, but starts on page 247 of the book

-----------------
DataStructures

TODO:

Trees:
  - traverse in/pre/post order
  - BFS vs DFS
  - algorithms to traverse/insert/delete/balance
  - You should be familiar with at least one flavor of balanced binary tree,
    whether it's a red/black tree, a splay tree or an AVL tree.
    You should actually know how it's implemented.

Graphs
  - Graph coloring problem?

-----------------

Operating Systems:
   - Schedulers
   - How context switching works
   - Locks
      mutex
      semaphore
      monitors
   - Livelock
   - Resources needed by process vs thread
   - Read Doug Lea's Concurrent Programming in Java


-----------------

Problem Solving:
   - Programming Pearls
     https://www.amazon.com/Programming-Pearls-2nd-Jon-Bentley/dp/0201657880

System Design:
   - features sets
   - distributed ssytems
   - distributed hash table Systems
   - resource estimation with real Systems
   - map-reduce
  - Introduction to Information Retrieval, 1st Edition (by Manning et al)
    https://www.amazon.com/Introduction-Information-Retrieval-Christopher-Manning/dp/0521865719

 Mobile Architecture:
    - How does a huge influx of mobile traffic affect your architecture?




-----------------
Math:
-----------------

   - Refresh probability and discrete mathematics
   - n-choose-k problems

-----------------
Design patterns:
-----------------

    - refresh them all

-----------------
DESIGN INTERVIEW
-----------------

   https://www.linkedin.com/pulse/technical-design-interview-guide-success-joey-addona/?trk=mp-reader-card

   1) Find the requirements/restrictions
   2) Break down the problem
   3) Don't be messy (aka break down, and work from left to right)
   4) Communicate, Ask questions: Say why you do things, ask about restrictions/focus
   5) Know how to scale




   def is_valid_solution(k, state):
       return k == state.n

   def get_options(k, state):
       return (
          pos
          for pos in state.available_positions
          if pos != k
       )

    def make_move(k, option, state):
         del state.available_positions[option]

    def undo_move(k, option, state):
         state.available_positions.add(option)
